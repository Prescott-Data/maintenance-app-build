{"version":3,"file":"static/js/9864.f2720f88.chunk.js","mappings":"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","sources":["D2App/pages/dataElementGroupSets/Edit.js","D2App/pages/dataElementGroupSets/fields/CompulsoryField.js","D2App/pages/dataElementGroupSets/fields/DataDimensionField.js","D2App/pages/dataElementGroupSets/fields/DataElementGroupsField.js","D2App/pages/dataElementGroupSets/form/DataElementGroupSetFormFields.js","D2App/pages/dataElementGroupSets/form/dataElementGroupSetSchema.js","webpack://@dhis2/app-shell/./src/D2App/pages/dataElementGroupSets/fields/DataElementGroupsField.module.css?f983"],"sourcesContent":["import { useDataQuery } from '@dhis2/app-runtime';\nimport i18n from '@dhis2/d2-i18n';\nimport React from 'react';\nimport { withTypes } from 'react-final-form';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Loader } from '../../components';\nimport { DefaultEditFormContents, useCustomAttributesQuery } from '../../components/form';\nimport { SCHEMA_SECTIONS, getSectionPath, usePatchModel, validate } from '../../lib';\nimport { createJsonPatchOperations } from '../../lib/form/createJsonPatchOperations';\nimport { getAllAttributeValues } from '../../lib/models/attributes';\nimport { DataElementGroupSetFormFields, dataElementGroupSetSchema } from './form';\nconst {\n  Form\n} = withTypes();\nconst section = SCHEMA_SECTIONS.dataElementGroupSet;\nconst query = {\n  dataElementGroupSet: {\n    resource: `dataElementGroupSets`,\n    id: _ref => {\n      let {\n        id\n      } = _ref;\n      return id;\n    },\n    params: {\n      fields: ['*', 'attributeValues[*]']\n    }\n  }\n};\nfunction useDataElementGroupSetQuery(id) {\n  return useDataQuery(query, {\n    variables: {\n      id\n    }\n  });\n}\nfunction computeInitialValues(_ref2) {\n  let {\n    dataElementGroupSet,\n    customAttributes\n  } = _ref2;\n  if (!dataElementGroupSet) {\n    return {};\n  }\n\n  // We want to have an array in the state with all attributes, not just the\n  // ones that are set\n  const attributeValues = getAllAttributeValues(dataElementGroupSet.attributeValues, customAttributes);\n  return {\n    id: dataElementGroupSet.id,\n    name: dataElementGroupSet.name,\n    shortName: dataElementGroupSet.shortName,\n    code: dataElementGroupSet.code,\n    description: dataElementGroupSet.description,\n    compulsory: dataElementGroupSet.compulsory,\n    dataDimension: dataElementGroupSet.dataDimension,\n    dataElementGroups: dataElementGroupSet.dataElementGroups || [],\n    attributeValues\n  };\n}\nexport const Component = () => {\n  var _dataElementGroupSetQ;\n  const params = useParams();\n  const dataElementGroupSetId = params.id;\n  const dataElementGroupSetQuery = useDataElementGroupSetQuery(dataElementGroupSetId);\n  const attributesQuery = useCustomAttributesQuery();\n  const dataElementGroupSet = (_dataElementGroupSetQ = dataElementGroupSetQuery.data) === null || _dataElementGroupSetQ === void 0 ? void 0 : _dataElementGroupSetQ.dataElementGroupSet;\n  return /*#__PURE__*/React.createElement(Loader, {\n    queryResponse: dataElementGroupSetQuery,\n    label: i18n.t('Data element group set')\n  }, /*#__PURE__*/React.createElement(Loader, {\n    queryResponse: attributesQuery,\n    label: i18n.t('Attributes')\n  }, /*#__PURE__*/React.createElement(DataElementGroupSetForm, {\n    dataElementGroupSet: dataElementGroupSet,\n    attributes: attributesQuery.data\n  })));\n};\nfunction DataElementGroupSetForm(_ref3) {\n  let {\n    dataElementGroupSet,\n    attributes\n  } = _ref3;\n  const navigate = useNavigate();\n  const patchDirtyFields = usePatchModel(dataElementGroupSet.id, section.namePlural);\n  async function onSubmit(values, form) {\n    const jsonPatchOperations = createJsonPatchOperations({\n      values,\n      dirtyFields: form.getState().dirtyFields,\n      originalValue: dataElementGroupSet\n    });\n    const errors = await patchDirtyFields(jsonPatchOperations);\n    if (errors) {\n      return errors;\n    }\n    navigate(getSectionPath(section));\n  }\n  return /*#__PURE__*/React.createElement(Form, {\n    validateOnBlur: true,\n    onSubmit: onSubmit,\n    validate: values => {\n      return validate(dataElementGroupSetSchema, values);\n    },\n    initialValues: computeInitialValues({\n      dataElementGroupSet,\n      customAttributes: attributes\n    })\n  }, _ref4 => {\n    let {\n      handleSubmit\n    } = _ref4;\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit\n    }, /*#__PURE__*/React.createElement(DefaultEditFormContents, {\n      section: section\n    }, /*#__PURE__*/React.createElement(DataElementGroupSetFormFields, null)));\n  });\n}","import i18n from '@dhis2/d2-i18n';\nimport { CheckboxFieldFF } from '@dhis2/ui';\nimport React from 'react';\nimport { Field as FieldRFF } from 'react-final-form';\nexport function CompulsoryField() {\n  return /*#__PURE__*/React.createElement(FieldRFF, {\n    component: CheckboxFieldFF,\n    dataTest: \"dataelementsformfields-compulsory\",\n    name: \"compulsory\",\n    label: i18n.t('Compulsory'),\n    type: \"checkbox\",\n    validateFields: []\n  });\n}","import i18n from '@dhis2/d2-i18n';\nimport { CheckboxFieldFF } from '@dhis2/ui';\nimport React from 'react';\nimport { Field as FieldRFF } from 'react-final-form';\nexport function DataDimensionField() {\n  return /*#__PURE__*/React.createElement(FieldRFF, {\n    component: CheckboxFieldFF,\n    dataTest: \"dataelementsformfields-datadimension\",\n    name: \"dataDimension\",\n    label: i18n.t('Data dimension'),\n    type: \"checkbox\",\n    validateFields: []\n  });\n}","import i18n from '@dhis2/d2-i18n';\nimport { ButtonStrip, Button, Field } from '@dhis2/ui';\nimport React, { useRef } from 'react';\nimport { useField } from 'react-final-form';\nimport { useHref } from 'react-router';\nimport { DataElementGroupsTransfer } from '../../../components';\nimport classes from './DataElementGroupsField.module.css';\n\n/**\n *\n * DataElementGroups\n *\n */\nexport function DataElementGroupsField() {\n  var _meta$error;\n  const name = 'dataElementGroups';\n  const {\n    input,\n    meta\n  } = useField(name, {\n    multiple: true,\n    format: dataElementGroups => dataElementGroups === null || dataElementGroups === void 0 ? void 0 : dataElementGroups.map(dataElementGroups => dataElementGroups.id),\n    parse: ids => ids.map(id => ({\n      id\n    })),\n    validateFields: []\n  });\n  const newDataElementGroupsLink = useHref('/dataElementGroups/new');\n  const dataElementGroupsHandle = useRef({\n    refetch: () => {\n      throw new Error('Not initialized');\n    }\n  });\n  const rightHeader = /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.dataElementGroupsPickedHeader\n  }, i18n.t('Selected data element groups'));\n  const leftFooter = /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.dataElementGroupsOptionsFooter\n  }, /*#__PURE__*/React.createElement(ButtonStrip, null, /*#__PURE__*/React.createElement(Button, {\n    small: true,\n    onClick: dataElementGroupsHandle.current.refetch\n  }, i18n.t('Refresh list')), /*#__PURE__*/React.createElement(Button, {\n    small: true,\n    onClick: () => window.open(newDataElementGroupsLink, '_blank')\n  }, i18n.t('Add new'))));\n  return /*#__PURE__*/React.createElement(Field, {\n    dataTest: \"dataelementsformfields-dataElementGroupsets\",\n    error: !!meta.error,\n    validationText: (_meta$error = meta.error) === null || _meta$error === void 0 ? void 0 : _meta$error.toString(),\n    name: name\n  }, /*#__PURE__*/React.createElement(DataElementGroupsTransfer, {\n    ref: dataElementGroupsHandle,\n    selected: input.value,\n    onChange: _ref => {\n      let {\n        selected\n      } = _ref;\n      return input.onChange(selected);\n    },\n    rightHeader: rightHeader,\n    leftFooter: leftFooter\n  }));\n}","import i18n from '@dhis2/d2-i18n';\nimport React from 'react';\nimport { CustomAttributesSection, StandardFormSection, StandardFormSectionTitle, StandardFormSectionDescription, StandardFormField } from '../../../components';\nimport { DefaultIdentifiableFields, DescriptionField } from '../../../components/form';\nimport { SCHEMA_SECTIONS } from '../../../lib';\nimport { CompulsoryField, DataDimensionField, DataElementGroupsField } from '../fields';\nconst section = SCHEMA_SECTIONS.dataElementGroupSet;\nexport function DataElementGroupSetFormFields() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StandardFormSection, null, /*#__PURE__*/React.createElement(StandardFormSectionTitle, null, i18n.t('Basic information')), /*#__PURE__*/React.createElement(StandardFormSectionDescription, null, i18n.t('Set up the information for this data element group')), /*#__PURE__*/React.createElement(DefaultIdentifiableFields, null), /*#__PURE__*/React.createElement(StandardFormField, null, /*#__PURE__*/React.createElement(DescriptionField, {\n    schemaSection: section,\n    helpText: i18n.t('Explain the purpose of this data element group.')\n  })), /*#__PURE__*/React.createElement(StandardFormField, null, /*#__PURE__*/React.createElement(CompulsoryField, null)), /*#__PURE__*/React.createElement(StandardFormField, null, /*#__PURE__*/React.createElement(DataDimensionField, null))), /*#__PURE__*/React.createElement(StandardFormSection, null, /*#__PURE__*/React.createElement(StandardFormSectionTitle, null, i18n.t('Data element groups')), /*#__PURE__*/React.createElement(StandardFormSectionDescription, null, ''), /*#__PURE__*/React.createElement(StandardFormField, null, /*#__PURE__*/React.createElement(DataElementGroupsField, null))), /*#__PURE__*/React.createElement(CustomAttributesSection, {\n    schemaSection: section\n  }));\n}","import { z } from 'zod';\nexport const dataElementGroupSetSchema = z.object({\n  name: z.string().trim(),\n  shortName: z.string().trim(),\n  code: z.string().trim(),\n  description: z.string().trim(),\n  dataElements: z.array(z.object({\n    id: z.string()\n  }))\n}).partial();","// extracted by mini-css-extract-plugin\nexport default {\"dataElementsOptionsFooter\":\"DataElementGroupsField_dataElementsOptionsFooter__l9fmA\",\"dataElementsPickedHeader\":\"DataElementGroupsField_dataElementsPickedHeader__uWdRL\"};"],"names":["Form","withTypes","section","SCHEMA_SECTIONS","dataElementGroupSet","query","resource","id","_ref","params","fields","computeInitialValues","_ref2","customAttributes","attributeValues","getAllAttributeValues","name","shortName","code","description","compulsory","dataDimension","dataElementGroups","Component","_dataElementGroupSetQ","dataElementGroupSetId","useParams","dataElementGroupSetQuery","useDataQuery","variables","attributesQuery","useCustomAttributesQuery","data","React","Loader","queryResponse","label","i18n","t","DataElementGroupSetForm","attributes","_ref3","navigate","useNavigate","patchDirtyFields","usePatchModel","namePlural","validateOnBlur","onSubmit","async","values","form","jsonPatchOperations","createJsonPatchOperations","dirtyFields","getState","originalValue","errors","getSectionPath","validate","dataElementGroupSetSchema","initialValues","_ref4","handleSubmit","DefaultEditFormContents","DataElementGroupSetFormFields","CompulsoryField","FieldRFF","component","CheckboxFieldFF","dataTest","type","validateFields","DataDimensionField","DataElementGroupsField","_meta$error","input","meta","useField","multiple","format","map","parse","ids","newDataElementGroupsLink","useHref","dataElementGroupsHandle","useRef","refetch","Error","rightHeader","className","classes","dataElementGroupsPickedHeader","leftFooter","dataElementGroupsOptionsFooter","ButtonStrip","Button","small","onClick","current","window","open","Field","error","validationText","toString","DataElementGroupsTransfer","ref","selected","value","onChange","StandardFormSection","StandardFormSectionTitle","StandardFormSectionDescription","DefaultIdentifiableFields","StandardFormField","DescriptionField","schemaSection","helpText","CustomAttributesSection","z","object","string","trim","dataElements","array","partial"],"sourceRoot":""}