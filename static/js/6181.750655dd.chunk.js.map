{"version":3,"file":"static/js/6181.750655dd.chunk.js","mappings":"gPAKA,MAAMA,EAAwB,CAAC,OAAQ,YAAa,aAAc,SAAU,eAAgB,QAAS,oBAAqB,WAAY,gBAAiB,cAOjJC,EAA0BC,EAAAA,EAAKC,EAAE,gEACjCC,EAAkCF,EAAAA,EAAKC,EAAE,yCACxC,SAASE,IACd,IAAIC,EACJ,MAAM,OACJC,IACEC,EAAAA,EAAAA,MAEEC,GADiBC,EAAAA,EAAAA,IAAS,aACCC,MAAMC,MACjCC,EAAWb,EAAsBc,SAASL,IAChDM,EAAAA,EAAAA,YAAU,KACJF,GACFN,EAAO,kBAAmB,OAC5B,GACC,CAACA,EAAQM,IACZ,MAAM,YACJG,IACEC,EAAAA,EAAAA,MACEC,GAA0F,QAA9EZ,EAAwBU,EAAYG,WAAWC,gBAAgBC,iBAAiD,IAA1Bf,OAAmC,EAASA,EAAsBgB,KAAIC,IAAQ,CACpLX,MAAOW,EACPC,MAAOC,EAAAA,GAAiBF,SAClB,GACFG,EAAWb,EAAW,GAAGZ,KAA2BG,IAAoCH,EAC9F,OAAoB0B,EAAAA,cAAoBC,EAAAA,GAAU,CAChDf,SAAUA,EACVgB,UAAWC,EAAAA,EACXC,SAAU,6BACVC,UAAWnB,EACXoB,WAAY,QACZC,KAAM,kBACNV,MAAOX,EAAWX,EAAAA,EAAKC,EAAE,oBAAsBD,EAAAA,EAAKC,EAAE,4BAA6B,CACjFgC,WAAYjC,EAAAA,EAAKC,EAAE,sBAErBuB,SAAUA,EACVR,QAASA,EACTkB,eAAgB,GAChBC,SAAUL,EAAAA,IAEd,C","sources":["D2App/pages/dataElements/fields/AggregationTypeField.js"],"sourcesContent":["import i18n from '@dhis2/d2-i18n';\nimport { SingleSelectFieldFF } from '@dhis2/ui';\nimport React, { useEffect } from 'react';\nimport { Field as FieldRFF, useForm, useField } from 'react-final-form';\nimport { AGGREGATION_TYPE, required, useSchemas } from '../../../lib';\nconst DISABLING_VALUE_TYPES = ['TEXT', 'LONG_TEXT', 'MULTI_TEXT', 'LETTER', 'PHONE_NUMBER', 'EMAIL', 'TRACKER_ASSOCIATE', 'USERNAME', 'FILE_RESOURCE', 'COORDINATE'];\n\n/**\n * Field rule: When value type has a certain value,\n *             disable aggregationType field\n * Field rule: When value type is disabled, set value to ''\n */\nconst aggregationTypeHelpText = i18n.t('The default way to aggregate this data element in analytics.');\nconst aggregationTypeDisabledHelpText = i18n.t('Disabled for the selected value type.');\nexport function AggregationTypeField() {\n  var _dataElement$properti;\n  const {\n    change\n  } = useForm();\n  const valueTypeField = useField('valueType');\n  const valueType = valueTypeField.input.value;\n  const disabled = DISABLING_VALUE_TYPES.includes(valueType);\n  useEffect(() => {\n    if (disabled) {\n      change('aggregationType', 'NONE');\n    }\n  }, [change, disabled]);\n  const {\n    dataElement\n  } = useSchemas();\n  const options = ((_dataElement$properti = dataElement.properties.aggregationType.constants) === null || _dataElement$properti === void 0 ? void 0 : _dataElement$properti.map(constant => ({\n    value: constant,\n    label: AGGREGATION_TYPE[constant]\n  }))) || [];\n  const helpText = disabled ? `${aggregationTypeHelpText} ${aggregationTypeDisabledHelpText}` : aggregationTypeHelpText;\n  return /*#__PURE__*/React.createElement(FieldRFF, {\n    disabled: disabled,\n    component: SingleSelectFieldFF,\n    dataTest: \"formfields-aggregationtype\",\n    required: !disabled,\n    inputWidth: \"400px\",\n    name: \"aggregationType\",\n    label: disabled ? i18n.t('Aggregation type') : i18n.t('{{fieldLabel}} (required)', {\n      fieldLabel: i18n.t('Aggregation type')\n    }),\n    helpText: helpText,\n    options: options,\n    validateFields: [],\n    validate: required\n  });\n}"],"names":["DISABLING_VALUE_TYPES","aggregationTypeHelpText","i18n","t","aggregationTypeDisabledHelpText","AggregationTypeField","_dataElement$properti","change","useForm","valueType","useField","input","value","disabled","includes","useEffect","dataElement","useSchemas","options","properties","aggregationType","constants","map","constant","label","AGGREGATION_TYPE","helpText","React","FieldRFF","component","SingleSelectFieldFF","dataTest","required","inputWidth","name","fieldLabel","validateFields","validate"],"sourceRoot":""}