{"version":3,"file":"static/js/156.8a404fd9.chunk.js","mappings":"yOAcA,MAAMA,EAAoBC,EAAAA,EAAKC,EAAE,2CAC3BC,EAA4BF,EAAAA,EAAKC,EAAE,mFACnCE,EAA2B,CAAC,KAAM,aACjC,SAASC,IACd,IAAIC,EAAmBC,EAAuBC,EAC9C,MAAM,OACJC,IACEC,EAAAA,EAAAA,OACE,OACJC,IACEC,EAAAA,EAAAA,IAAa,CACfC,aAAc,CACZF,QAAQ,KAGNG,IAAaH,EAAOI,UAAUC,IAC7BC,IAAQC,EAAAA,EAAAA,WAAUP,EAAOI,UAAUC,KACpC,QACJG,KACGC,IACDC,EAAAA,EAAAA,IAAkB,CACpBJ,OACAK,UAAW,CACTN,GAAIL,EAAOI,UAAUC,GACrBO,OAAQnB,MAGZoB,EAAAA,EAAAA,YAAU,KACJb,EAAOI,UAAUC,IACnBG,EAAQ,CACNH,GAAIL,EAAOI,UAAUC,IAEzB,GACC,CAACG,EAASR,EAAOI,UAAUC,MAC9BQ,EAAAA,EAAAA,YAAU,KACR,IAAIC,EAEEC,GADFf,EAAOI,UAAUC,IAAOI,EAAeO,SAAYP,EAAeQ,UAAaR,EAAeS,OAA0D,QAAhDJ,EAAuBL,EAAeU,YAA2C,IAAzBL,IAAmCA,EAAqBM,WAAWC,WAErOvB,EAAO,YAA+D,QAAjDiB,EAAwBN,EAAeU,YAA4C,IAA1BJ,OAAmC,EAASA,EAAsBK,WAAWC,UAC7J,IAEF,MAAMC,GAAUC,EAAAA,EAAAA,OACV,YACJC,GACEF,EACEG,EAAsD,eAArBzB,EAAOqB,YAA0E,QAA1C1B,EAAoBK,EAAOI,iBAA6C,IAAtBT,OAA+B,EAASA,EAAkBU,KAA8J,gBAApG,QAAjDT,EAAwBa,EAAeU,YAA4C,IAA1BvB,OAAmC,EAASA,EAAsBwB,WAAWC,WACnUK,EAAmF,QAAxE7B,EAAwB2B,EAAYG,WAAWN,UAAUO,iBAAiD,IAA1B/B,OAAmC,EAASA,EAAsBgC,KAAIC,IAAQ,CAC7KC,MAAOD,EACPE,MAAOC,EAAAA,GAAWH,OAChBI,QAAOC,IACT,IAAI,MACFJ,GACEI,EACJ,OAAOV,GAA4C,eAAVM,CAAsB,IAE3DK,EAAWjC,EAAW,GAAGd,KAAqBG,IAA8BH,EAClF,OAAoBgD,EAAAA,cAAoBC,EAAAA,GAAU,CAChDC,UAAU,EACVpC,SAAUA,EACVqC,UAAWC,EAAAA,EACXC,SAAU,uBACVC,WAAY,QACZC,KAAM,YACNZ,MAAO1C,EAAAA,EAAKC,EAAE,4BAA6B,CACzCsD,WAAYvD,EAAAA,EAAKC,EAAE,gBAErB6C,SAAUA,EACVV,QAASA,GAAW,GACpBoB,eAAgB,GAChBC,SAAUR,EAAAA,IAEd,C","sources":["D2App/pages/dataElements/fields/ValueTypeField.js"],"sourcesContent":["import i18n from '@dhis2/d2-i18n';\nimport { SingleSelectFieldFF } from '@dhis2/ui';\nimport React, { useEffect, useState } from 'react';\nimport { Field as FieldRFF, useForm, useFormState } from 'react-final-form';\nimport { VALUE_TYPE, required, useSchemas, useOptionSetQuery } from '../../../lib';\n\n/**\n * Field rule: Unless valueType or the selected optionSet's valueType is\n *             MULTI_TEXT, filter out the MULTI_TEXT option\n * Field rule: When the selected optionSet's valueType is MULTI_TEXT, disable\n *             valueType field\n * Field rule: When the selected optionSet's valueType is MULTI_TEXT, set\n *             valueTypeField value to optionSet's valueType\n */\nconst valueTypeHelpText = i18n.t('The type of data that will be recorded.');\nconst valueTypeDisabledHelpText = i18n.t('Disabled as the value type must match the value type of the selected option set');\nconst valueTypeOptionSetFields = ['id', 'valueType'];\nexport function ValueTypeField() {\n  var _values$optionSet, _optionSetQuery$data3, _dataElement$properti;\n  const {\n    change\n  } = useForm();\n  const {\n    values\n  } = useFormState({\n    subscription: {\n      values: true\n    }\n  });\n  const disabled = !!values.optionSet.id;\n  const [lazy] = useState(!values.optionSet.id);\n  const {\n    refetch,\n    ...optionSetQuery\n  } = useOptionSetQuery({\n    lazy,\n    variables: {\n      id: values.optionSet.id,\n      fields: valueTypeOptionSetFields\n    }\n  });\n  useEffect(() => {\n    if (values.optionSet.id) {\n      refetch({\n        id: values.optionSet.id\n      });\n    }\n  }, [refetch, values.optionSet.id]);\n  useEffect(() => {\n    var _optionSetQuery$data;\n    if (values.optionSet.id && !optionSetQuery.loading && !optionSetQuery.fetching && !optionSetQuery.error && (_optionSetQuery$data = optionSetQuery.data) !== null && _optionSetQuery$data !== void 0 && _optionSetQuery$data.optionSets.valueType) {\n      var _optionSetQuery$data2;\n      change('valueType', (_optionSetQuery$data2 = optionSetQuery.data) === null || _optionSetQuery$data2 === void 0 ? void 0 : _optionSetQuery$data2.optionSets.valueType);\n    }\n  });\n  const schemas = useSchemas();\n  const {\n    dataElement\n  } = schemas;\n  const optionSetHasMultiTextValueType = values.valueType === 'MULTI_TEXT' || ((_values$optionSet = values.optionSet) === null || _values$optionSet === void 0 ? void 0 : _values$optionSet.id) && ((_optionSetQuery$data3 = optionSetQuery.data) === null || _optionSetQuery$data3 === void 0 ? void 0 : _optionSetQuery$data3.optionSets.valueType) === 'MULTI_TEXT';\n  const options = (_dataElement$properti = dataElement.properties.valueType.constants) === null || _dataElement$properti === void 0 ? void 0 : _dataElement$properti.map(constant => ({\n    value: constant,\n    label: VALUE_TYPE[constant]\n  })).filter(_ref => {\n    let {\n      value\n    } = _ref;\n    return optionSetHasMultiTextValueType || value !== 'MULTI_TEXT';\n  });\n  const helpText = disabled ? `${valueTypeHelpText} ${valueTypeDisabledHelpText}` : valueTypeHelpText;\n  return /*#__PURE__*/React.createElement(FieldRFF, {\n    required: true,\n    disabled: disabled,\n    component: SingleSelectFieldFF,\n    dataTest: \"formfields-valuetype\",\n    inputWidth: \"400px\",\n    name: \"valueType\",\n    label: i18n.t('{{fieldLabel}} (required)', {\n      fieldLabel: i18n.t('Value type')\n    }),\n    helpText: helpText,\n    options: options || [],\n    validateFields: [],\n    validate: required\n  });\n}"],"names":["valueTypeHelpText","i18n","t","valueTypeDisabledHelpText","valueTypeOptionSetFields","ValueTypeField","_values$optionSet","_optionSetQuery$data3","_dataElement$properti","change","useForm","values","useFormState","subscription","disabled","optionSet","id","lazy","useState","refetch","optionSetQuery","useOptionSetQuery","variables","fields","useEffect","_optionSetQuery$data","_optionSetQuery$data2","loading","fetching","error","data","optionSets","valueType","schemas","useSchemas","dataElement","optionSetHasMultiTextValueType","options","properties","constants","map","constant","value","label","VALUE_TYPE","filter","_ref","helpText","React","FieldRFF","required","component","SingleSelectFieldFF","dataTest","inputWidth","name","fieldLabel","validateFields","validate"],"sourceRoot":""}