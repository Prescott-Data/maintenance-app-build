{"version":3,"file":"static/js/492.8c10f161.chunk.js","mappings":"oRAGA,MAAMA,EAAsB,CAAC,KAAM,SAAU,cAAe,QAAS,OAAQ,SAAU,oCACjFC,EAAyBC,IAC7B,MAAMC,EAAgBH,EAAoBI,OAAOF,GAC3CG,EAAiB,aAAaF,EAAcG,eAClD,OAAOH,EAAcC,OAAOC,EAAe,EAEhCE,EAAsBC,IACjC,IAAI,aACFN,EAAY,YACZO,EAAW,QACXC,GACEF,EACJ,MAAMG,GAAeC,EAAAA,EAAAA,MACfC,EAAgB,CACpBC,SAAU,oBACVC,OAAQ,CACNC,OAAQf,EAAuBC,GAC/Be,MAAOR,EACPS,qBAAqB,IAGzB,OAAOC,EAAAA,EAAAA,UAAS,CACdT,UACAU,SAAU,CAACP,GACXQ,QAASV,EACTW,UAAW,IACXC,UAAW,IACXC,kBAAkB,GAClB,EAESC,EAAyCC,IACpD,MAAMf,GAAeC,EAAAA,EAAAA,MACfe,EAAYD,EAAQC,WAGnBC,EAAeC,IAAiBC,EAAAA,EAAAA,UAASC,OAAOC,YAAYD,OAAOE,KAAKN,GAAWO,KAAIC,GAAM,CAACA,EAAI,CAAC,QAKpGC,GAAoBC,EAAAA,EAAAA,UAAQ,IACzBN,OAAOE,KAAKN,GAAWW,SAAQH,IACtBP,EAAcO,IAAO,CAAC,IACvBD,KAAIK,GAAK,CAACJ,EAAII,QAE5B,CAACZ,EAAWC,IACTY,GAAgBC,EAAAA,EAAAA,cAAYN,IAChCN,GAAca,IACZ,MAAMC,EAAQD,EAAKP,IAAO,CAAC,GAC3B,MAAO,IACFO,EACH,CAACP,GAAK,IAAIQ,EAAOA,EAAMA,EAAMC,OAAS,GAAK,GAC5C,GACD,GACD,CAACf,IACEgB,EAAeT,EAAkBF,KAAIY,IACzC,IAAKX,EAAIY,GAAQD,EACjB,MAAMjC,EAAgB,CACpBC,SAAU,oBACVC,OAAQ,CACNC,OAAQf,EAAuByB,EAAQxB,cAGvC8C,OAAQ,CAAC,gBAAgBb,IAAM,SAASA,KACxCc,aAAc,KACdC,MAAO,kBACPH,KAAMA,IAaV,MAVqB,CACnBrC,QAASgB,EAAQhB,QACjBU,SAAU,CAACP,GACXQ,QAASV,EACTW,UAAW,IACXC,UAAW,IACX4B,KAAM,CACJC,OAAQjB,GAGO,IAGrB,MAAO,CACLkB,SAFcC,EAAAA,EAAAA,YAAWT,GAGzBL,gBACD,C","sources":["D2App/pages/organisationUnits/list/useOrganisationUnits.js"],"sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nimport { useQuery, useQueries } from 'react-query';\nimport { useBoundResourceQueryFn } from '../../../lib/query/useBoundQueryFn';\nconst staticOrgUnitFields = ['id', 'access', 'displayName', 'level', 'path', 'parent', 'children~size~rename(childCount)'];\nconst getOrgUnitFieldFilters = fieldFilters => {\n  const orgUnitFields = staticOrgUnitFields.concat(fieldFilters);\n  const ancestorFields = `ancestors[${orgUnitFields.join()},href]`;\n  return orgUnitFields.concat(ancestorFields);\n};\nexport const useFilteredOrgUnits = _ref => {\n  let {\n    fieldFilters,\n    searchQuery,\n    enabled\n  } = _ref;\n  const boundQueryFn = useBoundResourceQueryFn();\n  const resourceQuery = {\n    resource: 'organisationUnits',\n    params: {\n      fields: getOrgUnitFieldFilters(fieldFilters),\n      query: searchQuery,\n      withinUserHierarchy: true\n    }\n  };\n  return useQuery({\n    enabled,\n    queryKey: [resourceQuery],\n    queryFn: boundQueryFn,\n    staleTime: 60000,\n    cacheTime: 60000,\n    keepPreviousData: true\n  });\n};\nexport const usePaginatedChildrenOrgUnitsController = options => {\n  const boundQueryFn = useBoundResourceQueryFn();\n  const parentIds = options.parentIds;\n\n  // store a \"map\" of pages to fetch for each parent id\n  const [parentIdPages, setFetchPages] = useState(Object.fromEntries(Object.keys(parentIds).map(id => [id, [1]])));\n\n  // this will create a query for each parent id and each page\n  // eg if parentIds = ['a', 'b'] and fetchPages = {a: [1, 2], b: [1]}\n  // then queries will be [['a', 1], ['a', 2], ['b', 1]]\n  const flatParentIdPages = useMemo(() => {\n    return Object.keys(parentIds).flatMap(id => {\n      const pages = parentIdPages[id] || [1];\n      return pages.map(p => [id, p]);\n    });\n  }, [parentIds, parentIdPages]);\n  const fetchNextPage = useCallback(id => {\n    setFetchPages(prev => {\n      const pages = prev[id] || [1];\n      return {\n        ...prev,\n        [id]: [...pages, pages[pages.length - 1] + 1]\n      };\n    });\n  }, [setFetchPages]);\n  const queryObjects = flatParentIdPages.map(_ref2 => {\n    let [id, page] = _ref2;\n    const resourceQuery = {\n      resource: 'organisationUnits',\n      params: {\n        fields: getOrgUnitFieldFilters(options.fieldFilters),\n        // `id:eq:id` is for an edge-case where a root-unit is a leaf-node\n        // and `parent.id`-filter would return empty results\n        filter: [`parent.id:eq:${id}`, `id:eq:${id}`],\n        rootJunction: 'OR',\n        order: 'displayName:asc',\n        page: page\n      }\n    };\n    const queryOptions = {\n      enabled: options.enabled,\n      queryKey: [resourceQuery],\n      queryFn: boundQueryFn,\n      staleTime: 60000,\n      cacheTime: 60000,\n      meta: {\n        parent: id\n      }\n    };\n    return queryOptions;\n  });\n  const queries = useQueries(queryObjects);\n  return {\n    queries,\n    fetchNextPage\n  };\n};"],"names":["staticOrgUnitFields","getOrgUnitFieldFilters","fieldFilters","orgUnitFields","concat","ancestorFields","join","useFilteredOrgUnits","_ref","searchQuery","enabled","boundQueryFn","useBoundResourceQueryFn","resourceQuery","resource","params","fields","query","withinUserHierarchy","useQuery","queryKey","queryFn","staleTime","cacheTime","keepPreviousData","usePaginatedChildrenOrgUnitsController","options","parentIds","parentIdPages","setFetchPages","useState","Object","fromEntries","keys","map","id","flatParentIdPages","useMemo","flatMap","p","fetchNextPage","useCallback","prev","pages","length","queryObjects","_ref2","page","filter","rootJunction","order","meta","parent","queries","useQueries"],"sourceRoot":""}