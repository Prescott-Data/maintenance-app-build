{"version":3,"file":"static/js/2514.9661728b.chunk.js","mappings":"mtBAGA,MAAM,oBACJA,EAAmB,aACnBC,EAAY,oBACZC,GACEC,EAAAA,GACSC,EAAyBH,EAAaI,MAAML,GAAqBM,OAAO,CACnFC,UAAWC,EAAAA,EAAEC,SAASC,OAAOC,QAAQ,IACrCC,KAAMJ,EAAAA,EAAEC,SAASC,OAAOG,WACxBC,YAAaN,EAAAA,EAAEC,SAASC,OAAOG,WAC/BE,MAAOP,EAAAA,EAAEQ,OAAO,CACdC,GAAIT,EAAAA,EAAEC,WACLI,WACHK,YAAaV,EAAAA,EAAEC,SAASU,IAAI,EAAG,CAC7BC,QAASC,EAAAA,EAAKC,EAAE,mCACfC,IAAI,IAAK,CACVH,QAASC,EAAAA,EAAKC,EAAE,mCACfT,WACHW,cAAehB,EAAAA,EAAEC,SAASc,IAAI,IAAK,CACjCH,QAASC,EAAAA,EAAKC,EAAE,6CAA8C,CAC5DG,UAAW,QAEZZ,WACHa,YAAalB,EAAAA,EAAEmB,OAAOC,OACtBC,MAAOrB,EAAAA,EAAEC,SAASoB,QAAQhB,WAC1BiB,QAAStB,EAAAA,EAAEC,SAASc,IAAI,IAAK,CAC3BH,QAASC,EAAAA,EAAKC,EAAE,6CAA8C,CAC5DG,UAAW,QAEZZ,WACHkB,IAAKvB,EAAAA,EAAEC,SAASsB,IAAI,CAClBX,QAASC,EAAAA,EAAKC,EAAE,yBACfT,WACHmB,WAAYxB,EAAAA,EAAEmB,OAAOC,OAAOf,WAC5BoB,QAASzB,EAAAA,EAAEC,SAASc,IAAI,IAAM,CAC5BH,QAASC,EAAAA,EAAKC,EAAE,6CAA8C,CAC5DG,UAAW,QAEZZ,WACHqB,OAAQ1B,EAAAA,EAAEQ,OAAO,CACfC,GAAIT,EAAAA,EAAEC,SACN0B,KAAM3B,EAAAA,EAAEC,WACPI,WACHuB,SAAU5B,EAAAA,EAAEQ,OAAO,CACjBqB,KAAM7B,EAAAA,EAAE8B,QAAQ,SAChBC,YAAa/B,EAAAA,EAAEgC,MAAMhC,EAAAA,EAAEiC,UAAUC,OAAO,GAAGC,QAAOC,GAASA,EAAM,KAAO,IAAMA,EAAM,IAAM,IAAMA,EAAM,KAAO,KAAOA,EAAM,IAAM,KAAK,CACnIxB,QAASC,EAAAA,EAAKC,EAAE,uFAEjBuB,GAAGrC,EAAAA,EAAEQ,OAAO,CACbqB,KAAM7B,EAAAA,EAAEsC,MAAM,CAACtC,EAAAA,EAAE8B,QAAQ,cAAe9B,EAAAA,EAAE8B,QAAQ,cAAe9B,EAAAA,EAAE8B,QAAQ,mBAAoB9B,EAAAA,EAAE8B,QAAQ,WAAY9B,EAAAA,EAAE8B,QAAQ,gBAAiB9B,EAAAA,EAAE8B,QAAQ,2BACxJzB,WACJkC,SAAU7C,EAAoBW,WAAWF,QAAQ,IACjDqC,SAAU9C,EAAoBW,WAAWF,QAAQ,MAChDgC,QAAOM,IACR,IAAIC,EACJ,IAAKD,EAAQhC,GACX,OAAO,EAGT,QADkE,QAAtCiC,EAAkBD,EAAQf,cAAwC,IAApBgB,OAA6B,EAASA,EAAgBf,KAAKgB,SAASF,EAAQhC,IAC5H,GACzB,CACDG,QAASC,EAAAA,EAAKC,EAAE,wEAChBa,KAAM,CAAC,YAEIiB,GAAgBC,EAAAA,EAAAA,IAAYjD,GAC5BkD,GAAWC,EAAAA,EAAAA,IAAmBnD,E","sources":["D2App/pages/organisationUnits/form/organisationUnitSchema.js"],"sourcesContent":["import i18n from '@dhis2/d2-i18n';\nimport { z } from 'zod';\nimport { createFormValidate, getDefaults, modelFormSchemas } from '../../../lib';\nconst {\n  withAttributeValues,\n  identifiable,\n  referenceCollection\n} = modelFormSchemas;\nexport const organisationUnitSchema = identifiable.merge(withAttributeValues).extend({\n  shortName: z.string().trim().default(''),\n  code: z.string().trim().optional(),\n  description: z.string().trim().optional(),\n  image: z.object({\n    id: z.string()\n  }).optional(),\n  phoneNumber: z.string().min(0, {\n    message: i18n.t('Must be a valid mobile number')\n  }).max(150, {\n    message: i18n.t('Must be a valid mobile number')\n  }).optional(),\n  contactPerson: z.string().max(255, {\n    message: i18n.t('Should not exceed {{maxLength}} characters', {\n      maxLength: 255\n    })\n  }).optional(),\n  openingDate: z.coerce.date(),\n  email: z.string().email().optional(),\n  address: z.string().max(230, {\n    message: i18n.t('Should not exceed {{maxLength}} characters', {\n      maxLength: 255\n    })\n  }).optional(),\n  url: z.string().url({\n    message: i18n.t('Must be a valid url')\n  }).optional(),\n  closedDate: z.coerce.date().optional(),\n  comment: z.string().max(2000, {\n    message: i18n.t('Should not exceed {{maxLength}} characters', {\n      maxLength: 2000\n    })\n  }).optional(),\n  parent: z.object({\n    id: z.string(),\n    path: z.string()\n  }).optional(),\n  geometry: z.object({\n    type: z.literal('Point'),\n    coordinates: z.array(z.number()).length(2).refine(coord => coord[0] >= -90 && coord[0] <= 90 && coord[1] >= -180 && coord[1] <= 180, {\n      message: i18n.t('Longitude should be between -90 and 90. Latitude should be between -180 and 180')\n    })\n  }).or(z.object({\n    type: z.union([z.literal('Multipoint'), z.literal('Linestring'), z.literal('Multilinestring'), z.literal('Polygon'), z.literal('Multipolygon'), z.literal('Geometrycollection')])\n  })).optional(),\n  programs: referenceCollection.optional().default([]),\n  dataSets: referenceCollection.optional().default([])\n}).refine(orgUnit => {\n  var _orgUnit$parent;\n  if (!orgUnit.id) {\n    return true;\n  }\n  const isDescendantOfSelf = (_orgUnit$parent = orgUnit.parent) === null || _orgUnit$parent === void 0 ? void 0 : _orgUnit$parent.path.includes(orgUnit.id);\n  return !isDescendantOfSelf;\n}, {\n  message: i18n.t('Parent organisation unit cannot be itself or a descendant of itself.'),\n  path: ['parent']\n});\nexport const initialValues = getDefaults(organisationUnitSchema);\nexport const validate = createFormValidate(organisationUnitSchema);"],"names":["withAttributeValues","identifiable","referenceCollection","modelFormSchemas","organisationUnitSchema","merge","extend","shortName","z","string","trim","default","code","optional","description","image","object","id","phoneNumber","min","message","i18n","t","max","contactPerson","maxLength","openingDate","coerce","date","email","address","url","closedDate","comment","parent","path","geometry","type","literal","coordinates","array","number","length","refine","coord","or","union","programs","dataSets","orgUnit","_orgUnit$parent","includes","initialValues","getDefaults","validate","createFormValidate"],"sourceRoot":""}