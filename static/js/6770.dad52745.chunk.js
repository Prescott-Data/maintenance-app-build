"use strict";(self.webpackChunk_dhis2_app_shell=self.webpackChunk_dhis2_app_shell||[]).push([[6770,5920],{43539:function(a,e,t){t.r(e),t.d(e,{createJsonPatchOperations:function(){return o}});var n=t(68707),i=t.n(n);function o(a){let{dirtyFields:e,originalValue:t,values:n}=a;return Object.keys(e).map((a=>({op:i()(a,t)?"replace":"add",path:`/${a.replace(/[.]/g,"/")}`,value:i()(a,n)||""})))}},6770:function(a,e,t){t.r(e);var n=t(43539);describe("createJsonPatchOperations",(()=>{describe("createJsonPatchOperations",(()=>{it("should return an empty array if no dirty fields",(()=>{const a=(0,n.createJsonPatchOperations)({dirtyFields:{},originalValue:{id:"foo"},values:{}});expect(a).toEqual([])})),it("should return a json-patch payload for a single field",(()=>{const a=(0,n.createJsonPatchOperations)({dirtyFields:{name:!0},originalValue:{id:"foo",name:"bar"},values:{name:"baz"}});expect(a).toEqual([{op:"replace",path:"/name",value:"baz"}])})),it("should return a json-patch payload with add if value does not exist in originalValue",(()=>{const a=(0,n.createJsonPatchOperations)({dirtyFields:{name:!0},originalValue:{id:"foo"},values:{name:"baz"}});expect(a).toEqual([{op:"add",path:"/name",value:"baz"}])}))}))}))}}]);
//# sourceMappingURL=6770.dad52745.chunk.js.map