{"version":3,"file":"static/js/6770.dad52745.chunk.js","mappings":"uNACO,SAASA,EAA0BC,GACxC,IAAI,YACFC,EAAW,cACXC,EAAa,OACbC,GACEH,EACJ,OAAOI,OAAOC,KAAKJ,GAAaK,KAAIC,IAAI,CACtCC,GAAIC,IAAIF,EAAML,GAAiB,UAAY,MAC3CQ,KAAM,IAAIH,EAAKI,QAAQ,OAAQ,OAC/BC,MAAOH,IAAIF,EAAMJ,IAAW,MAEhC,C,6CCXAU,SAAS,6BAA6B,KACpCA,SAAS,6BAA6B,KACpCC,GAAG,mDAAmD,KACpD,MAAMC,GAAShB,EAAAA,EAAAA,2BAA0B,CACvCE,YAAa,CAAC,EACdC,cAAe,CACbc,GAAI,OAENb,OAAQ,CAAC,IAEXc,OAAOF,GAAQG,QAAQ,GAAG,IAE5BJ,GAAG,yDAAyD,KAC1D,MAAMC,GAAShB,EAAAA,EAAAA,2BAA0B,CACvCE,YAAa,CACXM,MAAM,GAERL,cAAe,CACbc,GAAI,MACJT,KAAM,OAERJ,OAAQ,CACNI,KAAM,SAQVU,OAAOF,GAAQG,QALE,CAAC,CAChBV,GAAI,UACJE,KAAM,QACNE,MAAO,QAEuB,IAElCE,GAAG,wFAAwF,KACzF,MAAMC,GAAShB,EAAAA,EAAAA,2BAA0B,CACvCE,YAAa,CACXM,MAAM,GAERL,cAAe,CACbc,GAAI,OAENb,OAAQ,CACNI,KAAM,SAQVU,OAAOF,GAAQG,QALE,CAAC,CAChBV,GAAI,MACJE,KAAM,QACNE,MAAO,QAEuB,GAChC,GACF,G","sources":["D2App/pages/dataElementGroups/edit/createJsonPatchOperations.js","D2App/pages/dataElementGroups/edit/createJsonPatchOperations.spec.js"],"sourcesContent":["import get from 'lodash/fp/get';\nexport function createJsonPatchOperations(_ref) {\n  let {\n    dirtyFields,\n    originalValue,\n    values\n  } = _ref;\n  return Object.keys(dirtyFields).map(name => ({\n    op: get(name, originalValue) ? 'replace' : 'add',\n    path: `/${name.replace(/[.]/g, '/')}`,\n    value: get(name, values) || ''\n  }));\n}","import { createJsonPatchOperations } from './createJsonPatchOperations';\ndescribe('createJsonPatchOperations', () => {\n  describe('createJsonPatchOperations', () => {\n    it('should return an empty array if no dirty fields', () => {\n      const actual = createJsonPatchOperations({\n        dirtyFields: {},\n        originalValue: {\n          id: 'foo'\n        },\n        values: {}\n      });\n      expect(actual).toEqual([]);\n    });\n    it('should return a json-patch payload for a single field', () => {\n      const actual = createJsonPatchOperations({\n        dirtyFields: {\n          name: true\n        },\n        originalValue: {\n          id: 'foo',\n          name: 'bar'\n        },\n        values: {\n          name: 'baz'\n        }\n      });\n      const expected = [{\n        op: 'replace',\n        path: '/name',\n        value: 'baz'\n      }];\n      expect(actual).toEqual(expected);\n    });\n    it('should return a json-patch payload with add if value does not exist in originalValue', () => {\n      const actual = createJsonPatchOperations({\n        dirtyFields: {\n          name: true\n        },\n        originalValue: {\n          id: 'foo'\n        },\n        values: {\n          name: 'baz'\n        }\n      });\n      const expected = [{\n        op: 'add',\n        path: '/name',\n        value: 'baz'\n      }];\n      expect(actual).toEqual(expected);\n    });\n  });\n});"],"names":["createJsonPatchOperations","_ref","dirtyFields","originalValue","values","Object","keys","map","name","op","get","path","replace","value","describe","it","actual","id","expect","toEqual"],"sourceRoot":""}