{"version":3,"file":"static/js/1787.d4e02d21.chunk.js","mappings":"qPAKA,MAAMA,EAAwB,CAAC,OAAQ,YAAa,aAAc,SAAU,eAAgB,QAAS,oBAAqB,WAAY,gBAAiB,cAOjJC,EAA0BC,EAAAA,EAAKC,EAAE,gEACjCC,EAAkCF,EAAAA,EAAKC,EAAE,yCACxC,SAASE,IACd,IAAIC,EACJ,MAAM,OACJC,IACEC,EAAAA,EAAAA,MAEEC,GADiBC,EAAAA,EAAAA,IAAS,aACCC,MAAMC,MACjCC,EAAWb,EAAsBc,SAASL,IAChDM,EAAAA,EAAAA,YAAU,KACJF,GACFN,EAAO,kBAAmB,OAC5B,GACC,CAACA,EAAQM,IACZ,MAAM,YACJG,IACEC,EAAAA,EAAAA,MACEC,GAA0F,QAA9EZ,EAAwBU,EAAYG,WAAWC,gBAAgBC,iBAAiD,IAA1Bf,OAAmC,EAASA,EAAsBgB,KAAIC,IAAQ,CACpLX,MAAOW,EACPC,MAAOC,EAAAA,GAAiBF,SAClB,GACFG,EAAWb,EAAW,GAAGZ,KAA2BG,IAAoCH,EAC9F,OAAoB0B,EAAAA,cAAoBC,EAAAA,GAAU,CAChDf,SAAUA,EACVgB,UAAWC,EAAAA,EACXC,SAAU,6BACVC,UAAWnB,EACXoB,WAAY,QACZC,KAAM,kBACNV,MAAOX,EAAWX,EAAAA,EAAKC,EAAE,oBAAsBD,EAAAA,EAAKC,EAAE,4BAA6B,CACjFgC,WAAYjC,EAAAA,EAAKC,EAAE,sBAErBuB,SAAUA,EACVR,QAASA,EACTkB,eAAgB,GAChBC,SAAUL,EAAAA,IAEd,C,uGC7CA,MAAMM,EAAmBC,OAAOC,KAAKf,EAAAA,IACrCgB,KAAKC,KAAK,oCAAoC,KACrC,IACFD,KAAKE,cAAc,oCACtB1B,WAAYwB,KAAKG,SAGrBC,SAAS,4BAA4B,KACxB5B,EAAAA,GACR6B,oBAAmB,MACpB9B,YAAa,CACXG,WAAY,CACVC,gBAAiB,CACfC,UAAWiB,SAKnB,MAAMS,EAAqB,CAAC,OAAQ,YAAa,aAAc,SAAU,eAAgB,QAAS,oBAAqB,WAAY,gBAAiB,cAE9IC,EAAoB,IADAV,EAAiBW,QAAO7B,IAAoB2B,EAAmBjC,SAASM,KAClDE,KAAIF,GAAmB,CAACA,GAAiB,QAAY2B,EAAmBzB,KAAIF,GAAmB,CAACA,GAAiB,MACjKyB,SAASK,KAAKF,EAAdH,CAAiC,qDAAqD,CAACpC,EAAWI,KAChGsC,KAAK,aAAatC,EAAW,WAAa,2BAA2BJ,KAAa2C,UAChF,MAAMC,EAAgB,CACpB5C,YACAW,gBAAiB,OAEbkC,GAASC,EAAAA,EAAAA,IAAqB5B,EAAAA,cAAoB6B,EAAAA,GAAM,CAC5DC,SAAUhB,KAAKG,KACfS,cAAeA,IACdK,IACD,IAAI,aACFC,GACED,EACJ,OAAoB/B,EAAAA,cAAoB,OAAQ,CAC9C8B,SAAUE,GACIhC,EAAAA,cAAoBtB,EAAAA,qBAAsB,MAAM,KAE5DM,QAAc2C,EAAOM,aAAa,6BACxCC,OAAOlD,EAAMmD,UAAUC,SAAS,aAAaC,KAAKnD,GAClD,MAAMoD,EAAaX,EAAOY,YAAY,OAClCrD,EACFgD,OAAOI,GAAYE,YAEnBN,OAAOI,GAAYG,YACrB,GACA,GACF,G","sources":["D2App/pages/dataElements/fields/AggregationTypeField.js","D2App/pages/dataElements/fields/AggregationTypeField.test.js"],"sourcesContent":["import i18n from '@dhis2/d2-i18n';\nimport { SingleSelectFieldFF } from '@dhis2/ui';\nimport React, { useEffect } from 'react';\nimport { Field as FieldRFF, useForm, useField } from 'react-final-form';\nimport { AGGREGATION_TYPE, required, useSchemas } from '../../../lib';\nconst DISABLING_VALUE_TYPES = ['TEXT', 'LONG_TEXT', 'MULTI_TEXT', 'LETTER', 'PHONE_NUMBER', 'EMAIL', 'TRACKER_ASSOCIATE', 'USERNAME', 'FILE_RESOURCE', 'COORDINATE'];\n\n/**\n * Field rule: When value type has a certain value,\n *             disable aggregationType field\n * Field rule: When value type is disabled, set value to ''\n */\nconst aggregationTypeHelpText = i18n.t('The default way to aggregate this data element in analytics.');\nconst aggregationTypeDisabledHelpText = i18n.t('Disabled for the selected value type.');\nexport function AggregationTypeField() {\n  var _dataElement$properti;\n  const {\n    change\n  } = useForm();\n  const valueTypeField = useField('valueType');\n  const valueType = valueTypeField.input.value;\n  const disabled = DISABLING_VALUE_TYPES.includes(valueType);\n  useEffect(() => {\n    if (disabled) {\n      change('aggregationType', 'NONE');\n    }\n  }, [change, disabled]);\n  const {\n    dataElement\n  } = useSchemas();\n  const options = ((_dataElement$properti = dataElement.properties.aggregationType.constants) === null || _dataElement$properti === void 0 ? void 0 : _dataElement$properti.map(constant => ({\n    value: constant,\n    label: AGGREGATION_TYPE[constant]\n  }))) || [];\n  const helpText = disabled ? `${aggregationTypeHelpText} ${aggregationTypeDisabledHelpText}` : aggregationTypeHelpText;\n  return /*#__PURE__*/React.createElement(FieldRFF, {\n    disabled: disabled,\n    component: SingleSelectFieldFF,\n    dataTest: \"formfields-aggregationtype\",\n    required: !disabled,\n    inputWidth: \"400px\",\n    name: \"aggregationType\",\n    label: disabled ? i18n.t('Aggregation type') : i18n.t('{{fieldLabel}} (required)', {\n      fieldLabel: i18n.t('Aggregation type')\n    }),\n    helpText: helpText,\n    options: options,\n    validateFields: [],\n    validate: required\n  });\n}","import { render } from '@testing-library/react';\nimport React from 'react';\nimport { Form } from 'react-final-form';\nimport { AGGREGATION_TYPE, useSchemas } from '../../../lib';\nimport { AggregationTypeField } from './AggregationTypeField';\nconst aggregationTypes = Object.keys(AGGREGATION_TYPE);\njest.mock('../../../lib/schemas/schemaStore', () => {\n  return {\n    ...jest.requireActual('../../../lib/schemas/schemaStore'),\n    useSchemas: jest.fn()\n  };\n});\ndescribe('<AggregationTypeField />', () => {\n  const uS = useSchemas;\n  uS.mockImplementation(() => ({\n    dataElement: {\n      properties: {\n        aggregationType: {\n          constants: aggregationTypes\n        }\n      }\n    }\n  }));\n  const disabledValueTypes = ['TEXT', 'LONG_TEXT', 'MULTI_TEXT', 'LETTER', 'PHONE_NUMBER', 'EMAIL', 'TRACKER_ASSOCIATE', 'USERNAME', 'FILE_RESOURCE', 'COORDINATE'];\n  const enabledValueTypes = aggregationTypes.filter(aggregationType => !disabledValueTypes.includes(aggregationType));\n  const disabelValueTypes = [...enabledValueTypes.map(aggregationType => [aggregationType, false]), ...disabledValueTypes.map(aggregationType => [aggregationType, true])];\n  describe.each(disabelValueTypes)('disabled should be $disabled for $aggregationType', (valueType, disabled) => {\n    test(`should be ${disabled ? 'disabled' : 'enabled'} for valueType ${valueType}`, async () => {\n      const initialValues = {\n        valueType,\n        aggregationType: 'SUM'\n      };\n      const result = render( /*#__PURE__*/React.createElement(Form, {\n        onSubmit: jest.fn(),\n        initialValues: initialValues\n      }, _ref => {\n        let {\n          handleSubmit\n        } = _ref;\n        return /*#__PURE__*/React.createElement(\"form\", {\n          onSubmit: handleSubmit\n        }, /*#__PURE__*/React.createElement(AggregationTypeField, null));\n      }));\n      const input = await result.findByTestId('dhis2-uicore-select-input');\n      expect(input.classList.contains('disabled')).toBe(disabled);\n      const sumElement = result.queryByText('Sum');\n      if (disabled) {\n        expect(sumElement).toBeFalsy();\n      } else {\n        expect(sumElement).toBeTruthy();\n      }\n    });\n  });\n});"],"names":["DISABLING_VALUE_TYPES","aggregationTypeHelpText","i18n","t","aggregationTypeDisabledHelpText","AggregationTypeField","_dataElement$properti","change","useForm","valueType","useField","input","value","disabled","includes","useEffect","dataElement","useSchemas","options","properties","aggregationType","constants","map","constant","label","AGGREGATION_TYPE","helpText","React","FieldRFF","component","SingleSelectFieldFF","dataTest","required","inputWidth","name","fieldLabel","validateFields","validate","aggregationTypes","Object","keys","jest","mock","requireActual","fn","describe","mockImplementation","disabledValueTypes","disabelValueTypes","filter","each","test","async","initialValues","result","render","Form","onSubmit","_ref","handleSubmit","findByTestId","expect","classList","contains","toBe","sumElement","queryByText","toBeFalsy","toBeTruthy"],"sourceRoot":""}