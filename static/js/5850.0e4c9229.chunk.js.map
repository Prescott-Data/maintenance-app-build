{"version":3,"file":"static/js/5850.0e4c9229.chunk.js","mappings":"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","sources":["D2App/pages/dataElements/List.js","D2App/pages/dataElements/List.spec.js","D2App/pages/defaultListTests.js"],"sourcesContent":["import { useDataQuery } from '@dhis2/app-runtime';\nimport React, { useEffect } from 'react';\nimport { SectionListWrapper } from '../../components';\nimport { useModelListView } from '../../components/sectionList/listView';\nimport { useSchemaFromHandle, useParamsForDataQuery, DEFAULT_FIELD_FILTERS } from '../../lib/';\nimport { getFieldFilter } from '../../lib/models/path';\nconst query = {\n  result: {\n    resource: 'dataElements',\n    params: params => params\n  }\n};\nexport const Component = () => {\n  const {\n    columns,\n    query: listViewQuery\n  } = useModelListView();\n  const initialParams = useParamsForDataQuery();\n  const schema = useSchemaFromHandle();\n  const {\n    refetch,\n    error,\n    data\n  } = useDataQuery(query,\n  // refetched on mount by effect below\n  {\n    lazy: true\n  });\n  useEffect(() => {\n    // wait to fetch until selected-columns are loaded\n    // so we dont fetch data multiple times\n    if (listViewQuery.isLoading) {\n      return;\n    }\n    refetch({\n      ...initialParams,\n      fields: columns.map(column => getFieldFilter(schema, column.path)).concat(DEFAULT_FIELD_FILTERS)\n    });\n  }, [refetch, initialParams, columns, listViewQuery.isLoading, schema]);\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(SectionListWrapper, {\n    error: error,\n    data: data === null || data === void 0 ? void 0 : data.result.dataElements,\n    pager: data === null || data === void 0 ? void 0 : data.result.pager,\n    refetch: refetch\n  }));\n};","import { FetchError } from '@dhis2/app-runtime';\nimport { fireEvent, render, waitFor, waitForElementToBeRemoved } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport React from 'react';\nimport currentUserMock from '../../__mocks__/currentUserMock.json';\nimport dataElementSchemaMock from '../../__mocks__/schema/dataElementsSchema.json';\nimport { SECTIONS_MAP, canEditModel } from '../../lib';\nimport { useSchemaStore } from '../../lib/schemas/schemaStore';\nimport { useCurrentUserStore } from '../../lib/user/currentUserStore';\nimport TestComponentWithRouter from '../../testUtils/TestComponentWithRouter';\nimport { generateDefaultListTests } from '../defaultListTests';\nimport dataElementsMock from './__mocks__/list/dataElementsMock.json';\nimport filteredDataElementsMock from './__mocks__/list/filteredDataElementsMock.json';\nimport { Component as DataElementList } from './List';\nconst FIRST_DATA_ELEMENT = dataElementsMock.dataElements[0];\nconst FIRST_FILTERED_DATA_ELEMENT = filteredDataElementsMock.dataElements[0];\nconst renderSection = async customData => {\n  const routeOptions = {\n    handle: {\n      section: SECTIONS_MAP.dataElement\n    }\n  };\n  const result = render( /*#__PURE__*/React.createElement(TestComponentWithRouter, {\n    path: \"/dataElements\",\n    customData: customData,\n    routeOptions: routeOptions\n  }, /*#__PURE__*/React.createElement(DataElementList, null)));\n  await waitForElementToBeRemoved(() => result.queryByTestId('dhis2-uicore-circularloader'));\n  return result;\n};\n\n// userDataStore returns 404 if user hasnt edited a view, this is expected behaviour\nconst error404 = new FetchError({\n  type: 'unknown',\n  message: '404 not found',\n  details: {\n    httpStatusCode: 404\n  }\n});\nconst defaultUserDataStoreData = () => Promise.reject(new FetchError(error404));\ngenerateDefaultListTests({\n  componentName: 'Data element'\n});\ndescribe('Data Element List additional tests', () => {\n  const originalWarn = console.warn;\n  jest.spyOn(console, 'warn').mockImplementation(value => {\n    if (!value.match(/No server timezone/)) {\n      originalWarn(value);\n    }\n  });\n  useCurrentUserStore.getState().setCurrentUser({\n    ...currentUserMock,\n    authorities: new Set(currentUserMock.authorities)\n  });\n  useSchemaStore.getState().setSchemas({\n    dataElement: dataElementSchemaMock\n  });\n  afterAll(jest.restoreAllMocks);\n  it('should show the list of elements', async () => {\n    const customData = {\n      dataElements: dataElementsMock,\n      userDataStore: defaultUserDataStoreData\n    };\n    const {\n      getByText,\n      getByTestId\n    } = await renderSection(customData);\n    expect(getByText('ANC 1st visit')).not.toBeNull();\n    const {\n      id\n    } = FIRST_DATA_ELEMENT;\n    const firstRow = getByTestId(`section-list-row-${id}`);\n    expect(firstRow).toHaveTextContent(/ANC 1st visitAggregateNumberFixed\\/Outreach\\d+ years agoPublic can view/);\n  });\n  it('should display all the columns', async () => {\n    const customData = {\n      dataElements: dataElementsMock,\n      userDataStore: defaultUserDataStoreData\n    };\n    const {\n      getByText\n    } = await renderSection(customData);\n    const columns = ['Name', 'Domain type', 'Value type', 'Category combination', 'Public access', 'Last updated', 'Actions'];\n    columns.forEach(column => {\n      expect(getByText(column, {\n        selector: 'span'\n      })).not.toBeNull();\n    });\n  });\n  it('should allow searching for value', async () => {\n    const customData = {\n      userDataStore: defaultUserDataStoreData,\n      dataElements: (resource, r) => {\n        var _r$params$filter;\n        const filters = (_r$params$filter = r.params.filter) === null || _r$params$filter === void 0 ? void 0 : _r$params$filter.join(',');\n        if (filters === '') {\n          return Promise.resolve(dataElementsMock);\n        } else if (filters.startsWith('identifiable')) {\n          return Promise.resolve(filteredDataElementsMock);\n        } else {\n          return Promise.reject(`no matched data provider for resource:${resource},filters:${filters}`);\n        }\n      }\n    };\n    const {\n      findByText,\n      getByTestId\n    } = await renderSection(customData);\n    const searchInput = getByTestId('input-search-name').getElementsByTagName('input')[0];\n    fireEvent.change(searchInput, {\n      target: {\n        value: 'Age of LLINs'\n      }\n    });\n    await findByText('FILTERED Age of LLINs');\n  });\n  it('should display error when an API call fails', async () => {\n    const customData = {\n      userDataStore: defaultUserDataStoreData,\n      dataElements: () => {\n        return Promise.reject('401 backend error');\n      }\n    };\n    const {\n      getByText\n    } = await renderSection(customData);\n    expect(getByText('An error occurred')).not.toBeNull();\n    expect(getByText('An error occurred while loading the items.')).not.toBeNull();\n  });\n  describe('pager', () => {\n    const pagerMock = jest.fn();\n    afterEach(jest.resetAllMocks);\n    const renderWithPager = async () => {\n      const customData = {\n        userDataStore: defaultUserDataStoreData,\n        dataElements: (resource, r) => {\n          pagerMock(r);\n          const firstPage = {\n            pager: {\n              page: 1,\n              pageSize: 20,\n              total: 1061,\n              pageCount: 54\n            },\n            dataElements: [{\n              ...FIRST_FILTERED_DATA_ELEMENT,\n              displayName: 'first page result'\n            }]\n          };\n          const secondPage = {\n            pager: {\n              page: 2,\n              pageSize: 20,\n              total: 1061,\n              pageCount: 54\n            },\n            dataElements: [{\n              ...FIRST_FILTERED_DATA_ELEMENT,\n              displayName: 'second page result'\n            }]\n          };\n          if (r.params.page === 1) {\n            return Promise.resolve(firstPage);\n          }\n          if (r.params.page === 2) {\n            return Promise.resolve(secondPage);\n          }\n          return Promise.reject('something wrong with mock');\n        }\n      };\n      return renderSection(customData);\n    };\n    it('should display the page number', async () => {\n      const {\n        getByTestId\n      } = await renderWithPager();\n      const paginationFooter = getByTestId('section-list-pagination');\n      expect(paginationFooter).toHaveTextContent('Page 1 of 54');\n      expect(paginationFooter).toHaveTextContent('items 1-20 of 1061');\n    });\n    it('should disable previous page when on first page', async () => {\n      const {\n        getByTestId\n      } = await renderWithPager();\n      expect(getByTestId('dhis2-uiwidgets-pagination-page-previous')).toHaveAttribute('disabled');\n    });\n    // next page\n    it('should allow going to Next page', async () => {\n      const user = userEvent.setup();\n      const {\n        getByTestId,\n        findByText,\n        queryByText\n      } = await renderWithPager();\n      await user.click(getByTestId('dhis2-uiwidgets-pagination-page-next'));\n      await findByText('second page result');\n      expect(queryByText('first page result')).toBeNull();\n    });\n\n    // previous page\n    it('should allow going to Previous page ', async () => {\n      const user = userEvent.setup();\n      const {\n        getByTestId,\n        findByText,\n        queryByText\n      } = await renderWithPager();\n\n      // first page loaded\n      await findByText('first page result');\n\n      // go to next page\n      await user.click(getByTestId('dhis2-uiwidgets-pagination-page-next'));\n      await findByText('second page result');\n      expect(queryByText('first page result')).toBeNull();\n\n      // go back to previous page\n      await user.click(getByTestId('dhis2-uiwidgets-pagination-page-previous'));\n      await findByText('first page result');\n      expect(queryByText('second page result')).toBeNull();\n    });\n\n    // skipping - this test just doesn't work and I can't tell why. It doesn't seem to show the last page (and when it does, it doesn't disable the button).\n    // I tried different approaches and failed. Leaving it here temporarily in case someone want to give it  a go.\n    it.skip('should not show next in last page', async () => {\n      const {\n        getByTestId,\n        findByText\n      } = await renderSection({\n        userDataStore: defaultUserDataStoreData,\n        dataElements: {\n          pager: {\n            page: 54,\n            pageSize: 20,\n            total: 1061,\n            pageCount: 54\n          },\n          result: [{\n            ...FIRST_FILTERED_DATA_ELEMENT,\n            displayName: 'last page result'\n          }]\n        }\n      });\n      await findByText('last page result');\n      // debug(getByTestId('section-list-pagination'))\n      // await findByText('Page 54 of 54')\n      await waitFor(() => {\n        expect(getByTestId('dhis2-uiwidgets-pagination-page-next')).toHaveAttribute('disabled');\n      }, {\n        timeout: 5 * 1000\n      });\n    });\n  });\n  // select all\n  it('should allow selecting all items', async () => {\n    const user = userEvent.setup();\n    const customData = {\n      userDataStore: defaultUserDataStoreData,\n      dataElements: dataElementsMock\n    };\n    const {\n      getByTestId,\n      queryAllByTestId\n    } = await renderSection(customData);\n    await user.click(getByTestId('section-list-selectall'));\n    const allCheckBoxes = queryAllByTestId('section-list-row-checkbox');\n\n    // should only select checkboxes that are editable\n    const numberOfEditableItems = dataElementsMock.dataElements.reduce((acc, de) => de && canEditModel(de) ? acc + 1 : acc, 0);\n    expect(allCheckBoxes.length).toEqual(dataElementsMock.pager.pageSize);\n    let numberOfSelectedBoxes = 0;\n    allCheckBoxes.forEach(checkbox => {\n      // the UI library doesn't seem to apply checked on the input, which would have been a better test, so checking \"checked\" class on the svg icon\n      if (checkbox.getElementsByTagName('svg')[0].classList.contains('checked')) {\n        numberOfSelectedBoxes++;\n      }\n    });\n    expect(numberOfSelectedBoxes).toEqual(numberOfEditableItems);\n  });\n\n  // empty list\n  it('should show message when no items match filter', async () => {\n    const customData = {\n      userDataStore: defaultUserDataStoreData,\n      dataElements: {\n        ...dataElementsMock,\n        dataElements: []\n      }\n    };\n    const {\n      getByTestId\n    } = await renderSection(customData);\n    expect(getByTestId('dhis2-uicore-tablebody')).toHaveTextContent(\"There aren't any items that match your filter.\");\n  });\n});","export const generateDefaultListTests = _ref => {\n  let {\n    componentName\n  } = _ref;\n  xdescribe(`${componentName} default list tests`, () => {\n    it('should display all the items in the first page', () => {});\n    it('should display the default columns', () => {});\n    it('can change the visible columns through manage view', () => {});\n    it('should change the number of items that are displayed in a page when the number of items per page is changed', () => {});\n    it('can navigate through pages and show the corresponding items', () => {});\n    it('can sort teh results by columns', () => {});\n    it('should display error when an API call fails', () => {});\n  });\n  xdescribe(`${componentName} default filter tests`, () => {\n    it('scan filter the results by code using the input field', () => {});\n    it('scan filter the results by name using the input field', () => {});\n    it('scan filter the results by id using the input field', () => {});\n    it('should display the default filters', () => {});\n    it('can change the visible filters through manage view', () => {});\n    it('can remove all filters through manage view', () => {});\n  });\n  xdescribe(`${componentName} default row actions tests`, () => {\n    it('should display teh default actions in the actions menu', () => {});\n    it('redirect to the edit page when clicking on the edit action', () => {});\n    it('redirect to the edit page when clicking on the pencil icon', () => {});\n    it('delete an item when pressing teh delete action and confirming', () => {});\n    it('update the list when an item is deleted', () => {});\n    it('show the detail panel when the show details action is clicked', () => {});\n    it('show an edit button in the details panel', () => {});\n    it('be able to copy the api url in the details panel', () => {});\n    it('should open the sharing settings dialog when the sharing settings action is clicked', () => {});\n    it('should update the list view when the sharing settings dialog is closed', () => {});\n    it('should open a translation dialog when teh translate action is clicked', () => {});\n    it('should successfully save a new translation', () => {});\n  });\n  xdescribe(`${componentName} default multiple actions tests`, () => {\n    it('should display the multiple actions banner when 1 or more items are selected', () => {});\n    it('should indicate how many items were selected', () => {});\n    it('should update sharing settings for multiple items', () => {});\n    it('should download multiple items', () => {});\n    it('deselect all selected items', () => {});\n  });\n};"],"names":["query","result","resource","params","Component","columns","listViewQuery","useModelListView","initialParams","useParamsForDataQuery","schema","useSchemaFromHandle","refetch","error","data","useDataQuery","lazy","useEffect","isLoading","fields","map","column","getFieldFilter","path","concat","DEFAULT_FIELD_FILTERS","React","SectionListWrapper","dataElements","pager","FIRST_DATA_ELEMENT","dataElementsMock","FIRST_FILTERED_DATA_ELEMENT","filteredDataElementsMock","renderSection","async","routeOptions","handle","section","SECTIONS_MAP","dataElement","render","TestComponentWithRouter","customData","DataElementList","waitForElementToBeRemoved","queryByTestId","error404","FetchError","type","message","details","httpStatusCode","defaultUserDataStoreData","Promise","reject","generateDefaultListTests","componentName","describe","originalWarn","console","warn","jest","spyOn","mockImplementation","value","match","useCurrentUserStore","getState","setCurrentUser","currentUserMock","authorities","Set","useSchemaStore","setSchemas","dataElementSchemaMock","afterAll","restoreAllMocks","it","userDataStore","getByText","getByTestId","expect","not","toBeNull","id","firstRow","toHaveTextContent","forEach","selector","r","_r$params$filter","filters","filter","join","resolve","startsWith","findByText","searchInput","getElementsByTagName","fireEvent","change","target","pagerMock","fn","afterEach","resetAllMocks","renderWithPager","firstPage","page","pageSize","total","pageCount","displayName","secondPage","paginationFooter","toHaveAttribute","user","userEvent","setup","queryByText","click","skip","waitFor","timeout","queryAllByTestId","allCheckBoxes","numberOfEditableItems","reduce","acc","de","canEditModel","length","toEqual","numberOfSelectedBoxes","checkbox","classList","contains","_ref","xdescribe"],"sourceRoot":""}