{"version":3,"file":"static/js/6908.2e331cbc.chunk.js","mappings":"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","sources":["D2App/pages/organisationUnitGroupSets/Edit.js","D2App/pages/organisationUnitGroupSets/form/OrganisationalUnitGroupSetFormFields.js","D2App/pages/organisationUnitGroupSets/form/organisationUnitGroupSetSchema.js"],"sourcesContent":["import React from 'react';\nimport { useQuery } from 'react-query';\nimport { useParams } from 'react-router-dom';\nimport { DefaultEditFormContents, FormBase } from '../../components';\nimport { ATTRIBUTE_VALUES_FIELD_FILTERS, DEFAULT_FIELD_FILTERS, SECTIONS_MAP, useOnSubmitEdit } from '../../lib';\nimport { useBoundResourceQueryFn } from '../../lib/query/useBoundQueryFn';\nimport { validate } from './form';\nimport { OrganisationalUnitGroupSetFormFields } from './form/OrganisationalUnitGroupSetFormFields';\nconst fieldFilters = [...DEFAULT_FIELD_FILTERS, ...ATTRIBUTE_VALUES_FIELD_FILTERS, 'name', 'shortName', 'code', 'description', 'compulsory', 'dataDimension', 'includeSubhierarchyInAnalytics', 'organisationUnitGroups[id,displayName]'];\nexport const Component = () => {\n  const section = SECTIONS_MAP.organisationUnitGroupSet;\n  const queryFn = useBoundResourceQueryFn();\n  const modelId = useParams().id;\n  const query = {\n    resource: 'organisationUnitGroupSets',\n    id: modelId,\n    params: {\n      fields: fieldFilters.concat()\n    }\n  };\n  const organisationUnitGroupSetQuery = useQuery({\n    queryKey: [query],\n    queryFn: queryFn\n  });\n  return /*#__PURE__*/React.createElement(FormBase, {\n    onSubmit: useOnSubmitEdit({\n      section,\n      modelId\n    }),\n    section: section,\n    initialValues: organisationUnitGroupSetQuery.data,\n    validate: validate\n  }, /*#__PURE__*/React.createElement(DefaultEditFormContents, {\n    section: section\n  }, /*#__PURE__*/React.createElement(OrganisationalUnitGroupSetFormFields, null)));\n};","import i18n from '@dhis2/d2-i18n';\nimport { CheckboxFieldFF } from '@dhis2/ui';\nimport React from 'react';\nimport { Field as FieldRFF } from 'react-final-form';\nimport { CustomAttributesSection, DefaultIdentifiableFields, StandardFormField, StandardFormSection, StandardFormSectionTitle, StandardFormSectionDescription, DescriptionField, ModelTransferField } from '../../../components';\nimport { SECTIONS_MAP } from '../../../lib';\nexport const OrganisationalUnitGroupSetFormFields = () => {\n  const section = SECTIONS_MAP.category;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StandardFormSection, null, /*#__PURE__*/React.createElement(StandardFormSectionTitle, null, i18n.t('Basic information')), /*#__PURE__*/React.createElement(StandardFormSectionDescription, null, i18n.t('Set up the basic information for this organisational unit group set.')), /*#__PURE__*/React.createElement(DefaultIdentifiableFields, null), /*#__PURE__*/React.createElement(StandardFormField, null, /*#__PURE__*/React.createElement(DescriptionField, {\n    schemaSection: section\n  })), /*#__PURE__*/React.createElement(StandardFormField, null, /*#__PURE__*/React.createElement(FieldRFF, {\n    component: CheckboxFieldFF,\n    name: \"compulsory\",\n    label: i18n.t('Compulsory'),\n    type: \"checkbox\",\n    validateFields: []\n  })), /*#__PURE__*/React.createElement(StandardFormField, null, /*#__PURE__*/React.createElement(FieldRFF, {\n    component: CheckboxFieldFF,\n    name: \"dataDimension\",\n    label: i18n.t('Data dimension'),\n    type: \"checkbox\",\n    validateFields: []\n  })), /*#__PURE__*/React.createElement(StandardFormField, null, /*#__PURE__*/React.createElement(FieldRFF, {\n    component: CheckboxFieldFF,\n    name: \"includeSubhierarchyInAnalytics\",\n    label: i18n.t('Include subhierarchy in analytics'),\n    type: \"checkbox\",\n    validateFields: []\n  }))), /*#__PURE__*/React.createElement(StandardFormSection, null, /*#__PURE__*/React.createElement(StandardFormSectionTitle, null, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: 'organisationUnitGroups'\n  }, i18n.t('Organisation unit groups'))), /*#__PURE__*/React.createElement(StandardFormSectionDescription, null, i18n.t('Choose the groups to include in this organisation unit group set.')), /*#__PURE__*/React.createElement(StandardFormField, null, /*#__PURE__*/React.createElement(StandardFormField, null, /*#__PURE__*/React.createElement(ModelTransferField, {\n    name: \"organisationUnitGroups\",\n    query: {\n      resource: 'organisationUnitGroups',\n      params: {\n        filter: ['name:ne:default']\n      }\n    },\n    leftHeader: i18n.t('Available organisation unit groups'),\n    rightHeader: i18n.t('Selected organisation unit groups'),\n    filterPlaceholder: i18n.t('Filter available organisation unit groups'),\n    filterPlaceholderPicked: i18n.t('Filter selected organisation unit groups')\n  })))), /*#__PURE__*/React.createElement(CustomAttributesSection, {\n    schemaSection: section\n  }));\n};","import { z } from 'zod';\nimport { getDefaults, createFormValidate, modelFormSchemas } from '../../../lib';\n\n/*  Note that this describes what we send to the server,\n    and not what is stored in the form. */\nconst {\n  identifiable,\n  referenceCollection,\n  withAttributeValues\n} = modelFormSchemas;\nexport const organisationUnitGroupSetSchema = identifiable.merge(withAttributeValues).extend({\n  shortName: z.string().trim(),\n  code: z.string().trim().optional(),\n  description: z.string().trim().optional(),\n  compulsory: z.boolean(),\n  dataDimension: z.boolean(),\n  includeSubhierarchyInAnalytics: z.boolean(),\n  organisationUnitGroups: z.array(z.object({\n    id: z.string()\n  }))\n});\nexport const initialValues = getDefaults(organisationUnitGroupSetSchema);\nexport const validate = createFormValidate(organisationUnitGroupSetSchema);"],"names":["fieldFilters","DEFAULT_FIELD_FILTERS","ATTRIBUTE_VALUES_FIELD_FILTERS","Component","section","SECTIONS_MAP","organisationUnitGroupSet","queryFn","useBoundResourceQueryFn","modelId","useParams","id","query","resource","params","fields","concat","organisationUnitGroupSetQuery","useQuery","queryKey","React","FormBase","onSubmit","useOnSubmitEdit","initialValues","data","validate","DefaultEditFormContents","OrganisationalUnitGroupSetFormFields","category","StandardFormSection","StandardFormSectionTitle","i18n","t","StandardFormSectionDescription","DefaultIdentifiableFields","StandardFormField","DescriptionField","schemaSection","FieldRFF","component","CheckboxFieldFF","name","label","type","validateFields","htmlFor","ModelTransferField","filter","leftHeader","rightHeader","filterPlaceholder","filterPlaceholderPicked","CustomAttributesSection","identifiable","referenceCollection","withAttributeValues","modelFormSchemas","organisationUnitGroupSetSchema","merge","extend","shortName","z","string","trim","code","optional","description","compulsory","boolean","dataDimension","includeSubhierarchyInAnalytics","organisationUnitGroups","array","object","getDefaults","createFormValidate"],"sourceRoot":""}